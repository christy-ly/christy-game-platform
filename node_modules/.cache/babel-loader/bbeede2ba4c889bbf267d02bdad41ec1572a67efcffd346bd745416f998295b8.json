{"ast":null,"code":"var _jsxFileName = \"/Users/christylee/Desktop/christy-ly/christy-game-platform/src/games/TicTacToe/TicTacToe.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./TicTacToe.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TicTacToe = () => {\n  _s();\n  const SYMBOL_X = \"X\";\n  const SYMBOL_O = \"O\";\n  const gridSize = 3;\n  const winLength = 3;\n  const [blocks, setBlocks] = useState(Array(3 * 3).fill(null));\n  const [winner, setWinner] = useState(null);\n  const [currentTurn, setCurrentTurn] = useState(SYMBOL_X);\n  const [winnerLine, setWinnerLine] = useState([]);\n  const resetGame = () => {\n    setBlocks(Array(gridSize * gridSize).fill(null));\n    setCurrentTurn(SYMBOL_X);\n    setWinner(null);\n  };\n  const drawSymbol = index => {\n    if (blocks[index] || winner) return;\n    const newBlocks = blocks.slice();\n    newBlocks[index] = currentTurn;\n    setBlocks(newBlocks);\n    setCurrentTurn(currentTurn === SYMBOL_X ? SYMBOL_O : SYMBOL_X);\n    setWinner(checkWinner(newBlocks));\n  };\n  const checkWinner = board => {\n    const winPatterns = generateWinPatterns();\n    for (let line of winPatterns) {\n      const values = line.map(i => board[i]);\n      if (values.every(v => v && v === values[0])) {\n        setWinnerLine(line);\n        return values[0];\n      }\n    }\n    return null;\n  };\n\n  // Generate all possible winning patterns\n  const generateWinPatterns = () => {\n    let lines = [];\n\n    // Find all possibilities of horizontal lines\n    for (let row = 0; row < gridSize; row++) {\n      for (let col = 0; col <= gridSize - winLength; col++) {\n        lines.push([...Array(winLength)].map((_, i) => row * gridSize + col + i));\n      }\n    }\n\n    // Find all possibilities of vertical lines\n    for (let col = 0; col < gridSize; col++) {\n      for (let row = 0; row <= gridSize - winLength; row++) {\n        lines.push([...Array(winLength)].map((_, i) => (row + i) * gridSize + col));\n      }\n    }\n\n    // Find all possibilities of diagonal lines\n    for (let row = 0; row <= gridSize - winLength; row++) {\n      for (let col = 0; col <= gridSize - winLength; col++) {\n        lines.push([...Array(winLength)].map((_, i) => (row + i) * gridSize + col + i));\n        lines.push([...Array(winLength)].map((_, i) => (row + i) * gridSize + col + winLength - 1 - i));\n      }\n    }\n    return lines;\n  };\n  const renderGameScreen = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [winner ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xl font-bold text-purple-900\",\n          children: [\"Winner: \", winner]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xl font-bold text-purple-900\",\n          children: [\"Turn: \", currentTurn]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-container\",\n          style: {\n            gridTemplateColumns: `repeat(${gridSize}, 80px)`\n          },\n          children: [blocks.map((square, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `square ${winner && winnerLine.includes(i) ? \"winning-square\" : \"\"}`,\n            onClick: () => drawSymbol(i),\n            children: square\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hash-line horizontal-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hash-line horizontal-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hash-line vertical-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hash-line vertical-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex space-x-4\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-700\",\n            onClick: resetGame,\n            children: \"Restart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center space-y-4 p-4\",\n    children: renderGameScreen()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(TicTacToe, \"5LwKLOQVkfc5bHRybLKaW24StHQ=\");\n_c = TicTacToe;\nexport default TicTacToe;\nvar _c;\n$RefreshReg$(_c, \"TicTacToe\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","TicTacToe","_s","SYMBOL_X","SYMBOL_O","gridSize","winLength","blocks","setBlocks","Array","fill","winner","setWinner","currentTurn","setCurrentTurn","winnerLine","setWinnerLine","resetGame","drawSymbol","index","newBlocks","slice","checkWinner","board","winPatterns","generateWinPatterns","line","values","map","i","every","v","lines","row","col","push","_","renderGameScreen","children","className","fileName","_jsxFileName","lineNumber","columnNumber","style","gridTemplateColumns","square","includes","onClick","_c","$RefreshReg$"],"sources":["/Users/christylee/Desktop/christy-ly/christy-game-platform/src/games/TicTacToe/TicTacToe.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./TicTacToe.css\";\n\nconst TicTacToe = () => {\n  const SYMBOL_X = \"X\";\n  const SYMBOL_O = \"O\";\n  const gridSize = 3;\n  const winLength = 3;\n  const [blocks, setBlocks] = useState(Array(3 * 3).fill(null));\n  const [winner, setWinner] = useState(null);\n  const [currentTurn, setCurrentTurn] = useState(SYMBOL_X);\n  const [winnerLine, setWinnerLine] = useState([]);\n\n  const resetGame = () => {\n    setBlocks(Array(gridSize * gridSize).fill(null));\n    setCurrentTurn(SYMBOL_X);\n    setWinner(null);\n  };\n\n  const drawSymbol = (index) => {\n    if (blocks[index] || winner) return;\n    const newBlocks = blocks.slice();\n    newBlocks[index] = currentTurn;\n    setBlocks(newBlocks);\n    setCurrentTurn(currentTurn === SYMBOL_X ? SYMBOL_O : SYMBOL_X);\n    setWinner(checkWinner(newBlocks));\n  };\n\n  const checkWinner = (board) => {\n    const winPatterns = generateWinPatterns();\n    for (let line of winPatterns) {\n      const values = line.map((i) => board[i]);\n      if (values.every((v) => v && v === values[0])) {\n        setWinnerLine(line);\n        return values[0];\n      }\n    }\n    return null;\n  };\n\n  // Generate all possible winning patterns\n  const generateWinPatterns = () => {\n    let lines = [];\n\n    // Find all possibilities of horizontal lines\n    for (let row = 0; row < gridSize; row++) {\n      for (let col = 0; col <= gridSize - winLength; col++) {\n        lines.push(\n          [...Array(winLength)].map((_, i) => row * gridSize + col + i)\n        );\n      }\n    }\n\n    // Find all possibilities of vertical lines\n    for (let col = 0; col < gridSize; col++) {\n      for (let row = 0; row <= gridSize - winLength; row++) {\n        lines.push(\n          [...Array(winLength)].map((_, i) => (row + i) * gridSize + col)\n        );\n      }\n    }\n\n    // Find all possibilities of diagonal lines\n    for (let row = 0; row <= gridSize - winLength; row++) {\n      for (let col = 0; col <= gridSize - winLength; col++) {\n        lines.push(\n          [...Array(winLength)].map((_, i) => (row + i) * gridSize + col + i)\n        );\n        lines.push(\n          [...Array(winLength)].map(\n            (_, i) => (row + i) * gridSize + col + winLength - 1 - i\n          )\n        );\n      }\n    }\n    return lines;\n  };\n\n  const renderGameScreen = () => {\n    return (\n      <div>\n        {\n          <>\n            {winner ? (\n              <p className=\"text-xl font-bold text-purple-900\">\n                Winner: {winner}\n              </p>\n            ) : (\n              <p className=\"text-xl font-bold text-purple-900\">\n                Turn: {currentTurn}\n              </p>\n            )}\n            <div\n              className=\"grid-container\"\n              style={{ gridTemplateColumns: `repeat(${gridSize}, 80px)` }}\n            >\n              {blocks.map((square, i) => (\n                <button\n                  key={i}\n                  className={`square ${\n                    winner && winnerLine.includes(i) ? \"winning-square\" : \"\"\n                  }`}\n                  onClick={() => drawSymbol(i)}\n                >\n                  {square}\n                </button>\n              ))}\n\n              {/* Draw a Hash */}\n              <div className=\"hash-line horizontal-1\"></div>\n              <div className=\"hash-line horizontal-2\"></div>\n              <div className=\"hash-line vertical-1\"></div>\n              <div className=\"hash-line vertical-2\"></div>\n            </div>\n\n            <div className=\"flex space-x-4\">\n              <button\n                className=\"bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-700\"\n                onClick={resetGame}\n              >\n                Restart\n              </button>\n            </div>\n          </>\n        }\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"flex flex-col items-center space-y-4 p-4\">\n      {renderGameScreen()}\n    </div>\n  );\n};\n\nexport default TicTacToe;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}