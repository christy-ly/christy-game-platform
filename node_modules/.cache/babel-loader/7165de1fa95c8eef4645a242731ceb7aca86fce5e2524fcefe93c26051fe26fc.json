{"ast":null,"code":"var _jsxFileName = \"/Users/christylee/Desktop/christy-ly/christy-game-platform/src/games/TicTacToe/TicTacToe.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./TicTacToe.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TicTacToe = () => {\n  _s();\n  const SYMBOL_X = \"X\";\n  const SYMBOL_O = \"O\";\n  const gridSize = 3;\n  const winLength = 3;\n  const [board, setBoard] = useState(Array(3 * 3).fill(null));\n  const [winner, setWinner] = useState(null);\n  const [currentTurn, setCurrentTurn] = useState(SYMBOL_X);\n  const [winnerLine, setWinnerLine] = useState([]);\n  const resetGame = () => {\n    setBoard(Array(gridSize * gridSize).fill(null));\n    setCurrentTurn(SYMBOL_X);\n    setWinner(null);\n  };\n  const drawSymbol = index => {\n    if (board[index] || winner) return;\n\n    // Draw a symbol on the block\n    const newBoard = board.slice();\n    newBoard[index] = currentTurn;\n    setBoard(newBoard);\n\n    // Check if win\n    setWinner(checkWin(newBoard));\n\n    // Make a new turn\n    setCurrentTurn(currentTurn === SYMBOL_X ? SYMBOL_O : SYMBOL_X);\n  };\n  const checkWin = board => {\n    const winPatterns = generateWinPatterns();\n\n    // Compare the current marks with the winning patterns\n    for (let pattern of winPatterns) {\n      const marks = pattern.map(i => board[i]);\n      if (marks.every(val => val && val === marks[0])) {\n        setWinnerLine(pattern);\n        return marks[0];\n      }\n    }\n    return null;\n  };\n\n  // Generate all possible winning patterns\n  const generateWinPatterns = () => {\n    let lines = [];\n\n    // Find all winning horizontal lines\n    for (let row = 0; row < gridSize; row++) {\n      for (let col = 0; col <= gridSize - winLength; col++) {\n        lines.push([...Array(winLength)].map((val, idx) => row * gridSize + col + idx));\n      }\n    }\n\n    // Find all winning vertical lines\n    for (let col = 0; col < gridSize; col++) {\n      for (let row = 0; row <= gridSize - winLength; row++) {\n        lines.push([...Array(winLength)].map((val, idx) => (row + idx) * gridSize + col));\n      }\n    }\n\n    // Find all winning diagonal lines\n    for (let row = 0; row <= gridSize - winLength; row++) {\n      for (let col = 0; col <= gridSize - winLength; col++) {\n        lines.push([...Array(winLength)].map((val, idx) => (row + idx) * gridSize + col + idx));\n        lines.push([...Array(winLength)].map((val, idx) => (row + idx) * gridSize + col + winLength - 1 - idx));\n      }\n    }\n    return lines;\n  };\n  const renderGameScreen = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [winner ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xl font-bold text-purple-900\",\n          children: [\"Winner: \", winner]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xl font-bold text-purple-900\",\n          children: [\"Turn: \", currentTurn]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-container\",\n          style: {\n            gridTemplateColumns: `repeat(${gridSize}, 80px)`\n          },\n          children: [board.map((square, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `square ${winner && winnerLine.includes(i) ? \"winning-square\" : \"\"}`,\n            onClick: () => drawSymbol(i),\n            children: square\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hash-line horizontal-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hash-line horizontal-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hash-line vertical-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hash-line vertical-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex space-x-4\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-700\",\n            onClick: resetGame,\n            children: \"Restart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center space-y-4 p-4\",\n    children: renderGameScreen()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s(TicTacToe, \"HZatoWGfPF7L7X7E38Wp87nFeOw=\");\n_c = TicTacToe;\nexport default TicTacToe;\nvar _c;\n$RefreshReg$(_c, \"TicTacToe\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","TicTacToe","_s","SYMBOL_X","SYMBOL_O","gridSize","winLength","board","setBoard","Array","fill","winner","setWinner","currentTurn","setCurrentTurn","winnerLine","setWinnerLine","resetGame","drawSymbol","index","newBoard","slice","checkWin","winPatterns","generateWinPatterns","pattern","marks","map","i","every","val","lines","row","col","push","idx","renderGameScreen","children","className","fileName","_jsxFileName","lineNumber","columnNumber","style","gridTemplateColumns","square","includes","onClick","_c","$RefreshReg$"],"sources":["/Users/christylee/Desktop/christy-ly/christy-game-platform/src/games/TicTacToe/TicTacToe.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./TicTacToe.css\";\n\nconst TicTacToe = () => {\n  const SYMBOL_X = \"X\";\n  const SYMBOL_O = \"O\";\n  const gridSize = 3;\n  const winLength = 3;\n  const [board, setBoard] = useState(Array(3 * 3).fill(null));\n  const [winner, setWinner] = useState(null);\n  const [currentTurn, setCurrentTurn] = useState(SYMBOL_X);\n  const [winnerLine, setWinnerLine] = useState([]);\n\n  const resetGame = () => {\n    setBoard(Array(gridSize * gridSize).fill(null));\n    setCurrentTurn(SYMBOL_X);\n    setWinner(null);\n  };\n\n  const drawSymbol = (index) => {\n    if (board[index] || winner) return;\n\n    // Draw a symbol on the block\n    const newBoard = board.slice();\n    newBoard[index] = currentTurn;\n    setBoard(newBoard);\n\n    // Check if win\n    setWinner(checkWin(newBoard));\n\n    // Make a new turn\n    setCurrentTurn(currentTurn === SYMBOL_X ? SYMBOL_O : SYMBOL_X);\n  };\n\n  const checkWin = (board) => {\n    const winPatterns = generateWinPatterns();\n\n    // Compare the current marks with the winning patterns\n    for (let pattern of winPatterns) {\n      const marks = pattern.map((i) => board[i]);\n      if (marks.every((val) => val && val === marks[0])) {\n        setWinnerLine(pattern);\n        return marks[0];\n      }\n    }\n    return null;\n  };\n\n  // Generate all possible winning patterns\n  const generateWinPatterns = () => {\n    let lines = [];\n\n    // Find all winning horizontal lines\n    for (let row = 0; row < gridSize; row++) {\n      for (let col = 0; col <= gridSize - winLength; col++) {\n        lines.push(\n          [...Array(winLength)].map((val, idx) => row * gridSize + col + idx)\n        );\n      }\n    }\n\n    // Find all winning vertical lines\n    for (let col = 0; col < gridSize; col++) {\n      for (let row = 0; row <= gridSize - winLength; row++) {\n        lines.push(\n          [...Array(winLength)].map((val, idx) => (row + idx) * gridSize + col)\n        );\n      }\n    }\n\n    // Find all winning diagonal lines\n    for (let row = 0; row <= gridSize - winLength; row++) {\n      for (let col = 0; col <= gridSize - winLength; col++) {\n        lines.push(\n          [...Array(winLength)].map((val, idx) => (row + idx) * gridSize + col + idx)\n        );\n        lines.push(\n          [...Array(winLength)].map(\n            (val, idx) => (row + idx) * gridSize + col + winLength - 1 - idx\n          )\n        );\n      }\n    }\n    return lines;\n  };\n\n  const renderGameScreen = () => {\n    return (\n      <div>\n        {\n          <>\n            {winner ? (\n              <p className=\"text-xl font-bold text-purple-900\">\n                Winner: {winner}\n              </p>\n            ) : (\n              <p className=\"text-xl font-bold text-purple-900\">\n                Turn: {currentTurn}\n              </p>\n            )}\n            <div\n              className=\"grid-container\"\n              style={{ gridTemplateColumns: `repeat(${gridSize}, 80px)` }}\n            >\n              {board.map((square, i) => (\n                <button\n                  key={i}\n                  className={`square ${\n                    winner && winnerLine.includes(i) ? \"winning-square\" : \"\"\n                  }`}\n                  onClick={() => drawSymbol(i)}\n                >\n                  {square}\n                </button>\n              ))}\n\n              {/* Draw a Hash */}\n              <div className=\"hash-line horizontal-1\"></div>\n              <div className=\"hash-line horizontal-2\"></div>\n              <div className=\"hash-line vertical-1\"></div>\n              <div className=\"hash-line vertical-2\"></div>\n            </div>\n\n            <div className=\"flex space-x-4\">\n              <button\n                className=\"bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-700\"\n                onClick={resetGame}\n              >\n                Restart\n              </button>\n            </div>\n          </>\n        }\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"flex flex-col items-center space-y-4 p-4\">\n      {renderGameScreen()}\n    </div>\n  );\n};\n\nexport default TicTacToe;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}