{"ast":null,"code":"import React,{useState}from\"react\";import\"./TicTacToe.css\";import{jsxs as _jsxs,jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";const TicTacToe=()=>{const SYMBOL_X=\"X\";const SYMBOL_O=\"O\";const gridSize=3;const winLength=3;const[grid,setGrid]=useState(Array(gridSize*gridSize).fill(null));const[currentTurn,setCurrentTurn]=useState(SYMBOL_X);const[winnerLine,setWinnerLine]=useState([]);const[winner,setWinner]=useState(null);const resetGame=()=>{setGrid(Array(gridSize*gridSize).fill(null));setCurrentTurn(SYMBOL_X);setWinner(null);};const drawSymbol=index=>{if(winner||grid[index])return;// Draw a symbol on the cell\ngrid[index]=currentTurn;setGrid(grid);// Check if win\ncheckWin(grid);if(winner)return;// Make a new turn\nsetCurrentTurn(currentTurn===SYMBOL_X?SYMBOL_O:SYMBOL_X);};// Generate all possible winning patterns\nconst generateWinPatterns=()=>{let patterns=[];// Find all winning horizontal lines\nfor(let row=0;row<gridSize;row++){for(let col=0;col<=gridSize-winLength;col++){patterns.push([...Array(winLength)].map((val,idx)=>row*gridSize+col+idx));}}// Find all winning vertical lines\nfor(let col=0;col<gridSize;col++){for(let row=0;row<=gridSize-winLength;row++){patterns.push([...Array(winLength)].map((val,idx)=>(row+idx)*gridSize+col));}}// Find all winning diagonal lines\nfor(let row=0;row<=gridSize-winLength;row++){for(let col=0;col<=gridSize-winLength;col++){patterns.push([...Array(winLength)].map((val,idx)=>(row+idx)*gridSize+col+idx));patterns.push([...Array(winLength)].map((val,idx)=>(row+idx)*gridSize+col+winLength-1-idx));}}return patterns;};const checkWin=grid=>{const winPatterns=generateWinPatterns();// Compare the current marks with the winning patterns\nfor(let pattern of winPatterns){// Get the cell from the grid\n// Example: pattern = [0,1,2], marks = ['X','X','X']\nconst cells=pattern.map(val=>grid[val]);// Check if all marks are the same\nif(cells.every(val=>val&&val===cells[0])){setWinner(cells[0]);setWinnerLine(pattern);}}};const renderGameScreen=()=>{return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(_Fragment,{children:[winner?/*#__PURE__*/_jsxs(\"p\",{className:\"text-4xl font-bold text-center text-secondary\",children:[\"Winner: \",winner]}):/*#__PURE__*/_jsxs(\"p\",{className:\"text-2xl font-bold text-center\",children:[\"Turn: \",currentTurn]}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid-container\",style:{gridTemplateColumns:`repeat(${gridSize}, 100px)`},children:[grid.map((mark,idx)=>/*#__PURE__*/_jsx(\"button\",{className:`cell ${winner&&winnerLine.includes(idx)?\"winning-line\":\"\"}`,onClick:()=>drawSymbol(idx),children:mark},idx)),/*#__PURE__*/_jsx(\"div\",{className:\"hash-line horizontal-1\"}),/*#__PURE__*/_jsx(\"div\",{className:\"hash-line horizontal-2\"}),/*#__PURE__*/_jsx(\"div\",{className:\"hash-line vertical-1\"}),/*#__PURE__*/_jsx(\"div\",{className:\"hash-line vertical-2\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-center items-center\",children:/*#__PURE__*/_jsx(\"button\",{className:\"px-6 py-3 bg-secondary text-white text-lg font-bold rounded hover:bg-yellow-700\",onClick:resetGame,children:\"Restart\"})})]})});};return/*#__PURE__*/_jsx(\"div\",{className:\"flex flex-col items-center space-y-4 p-4\",children:renderGameScreen()});};export default TicTacToe;","map":{"version":3,"names":["React","useState","jsxs","_jsxs","jsx","_jsx","Fragment","_Fragment","TicTacToe","SYMBOL_X","SYMBOL_O","gridSize","winLength","grid","setGrid","Array","fill","currentTurn","setCurrentTurn","winnerLine","setWinnerLine","winner","setWinner","resetGame","drawSymbol","index","checkWin","generateWinPatterns","patterns","row","col","push","map","val","idx","winPatterns","pattern","cells","every","renderGameScreen","children","className","style","gridTemplateColumns","mark","includes","onClick"],"sources":["/Users/christylee/Desktop/christy-ly/christy-game-platform/src/games/TicTacToe/TicTacToe.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./TicTacToe.css\";\n\nconst TicTacToe = () => {\n  const SYMBOL_X = \"X\";\n  const SYMBOL_O = \"O\";\n  const gridSize = 3;\n  const winLength = 3;\n  const [grid, setGrid] = useState(Array(gridSize * gridSize).fill(null));\n  const [currentTurn, setCurrentTurn] = useState(SYMBOL_X);\n  const [winnerLine, setWinnerLine] = useState([]);\n  const [winner, setWinner] = useState(null);\n\n  const resetGame = () => {\n    setGrid(Array(gridSize * gridSize).fill(null));\n    setCurrentTurn(SYMBOL_X);\n    setWinner(null);\n  };\n\n  const drawSymbol = (index) => {\n    if (winner || grid[index]) return;\n\n    // Draw a symbol on the cell\n    grid[index] = currentTurn;\n    setGrid(grid);\n\n    // Check if win\n    checkWin(grid);\n    if (winner) return;\n\n    // Make a new turn\n    setCurrentTurn(currentTurn === SYMBOL_X ? SYMBOL_O : SYMBOL_X);\n  };\n\n  // Generate all possible winning patterns\n  const generateWinPatterns = () => {\n    let patterns = [];\n\n    // Find all winning horizontal lines\n    for (let row = 0; row < gridSize; row++) {\n      for (let col = 0; col <= gridSize - winLength; col++) {\n        patterns.push(\n          [...Array(winLength)].map((val, idx) => row * gridSize + col + idx)\n        );\n      }\n    }\n\n    // Find all winning vertical lines\n    for (let col = 0; col < gridSize; col++) {\n      for (let row = 0; row <= gridSize - winLength; row++) {\n        patterns.push(\n          [...Array(winLength)].map((val, idx) => (row + idx) * gridSize + col)\n        );\n      }\n    }\n\n    // Find all winning diagonal lines\n    for (let row = 0; row <= gridSize - winLength; row++) {\n      for (let col = 0; col <= gridSize - winLength; col++) {\n        patterns.push(\n          [...Array(winLength)].map(\n            (val, idx) => (row + idx) * gridSize + col + idx\n          )\n        );\n        patterns.push(\n          [...Array(winLength)].map(\n            (val, idx) => (row + idx) * gridSize + col + winLength - 1 - idx\n          )\n        );\n      }\n    }\n    return patterns;\n  };\n\n  const checkWin = (grid) => {\n    const winPatterns = generateWinPatterns();\n\n    // Compare the current marks with the winning patterns\n    for (let pattern of winPatterns) {\n      // Get the cell from the grid\n      // Example: pattern = [0,1,2], marks = ['X','X','X']\n      const cells = pattern.map((val) => grid[val]);\n      // Check if all marks are the same\n      if (cells.every((val) => val && val === cells[0])) {\n        setWinner(cells[0]);\n        setWinnerLine(pattern);\n      }\n    }\n  };\n\n  const renderGameScreen = () => {\n    return (\n      <div>\n        {\n          <>\n            {winner ? (\n              <p className=\"text-4xl font-bold text-center text-secondary\">\n                Winner: {winner}\n              </p>\n            ) : (\n              <p className=\"text-2xl font-bold text-center\">\n                Turn: {currentTurn}\n              </p>\n            )}\n            <div\n              className=\"grid-container\"\n              style={{ gridTemplateColumns: `repeat(${gridSize}, 100px)` }}\n            >\n              {grid.map((mark, idx) => (\n                <button\n                  key={idx}\n                  className={`cell ${\n                    winner && winnerLine.includes(idx) ? \"winning-line\" : \"\"\n                  }`}\n                  onClick={() => drawSymbol(idx)}\n                >\n                  {mark}\n                </button>\n              ))}\n\n              {/* Draw a Hash */}\n              <div className=\"hash-line horizontal-1\"></div>\n              <div className=\"hash-line horizontal-2\"></div>\n              <div className=\"hash-line vertical-1\"></div>\n              <div className=\"hash-line vertical-2\"></div>\n            </div>\n\n            <div className=\"flex justify-center items-center\">\n              <button\n                className=\"px-6 py-3 bg-secondary text-white text-lg font-bold rounded hover:bg-yellow-700\"\n                onClick={resetGame}\n              >\n                Restart\n              </button>\n            </div>\n          </>\n        }\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"flex flex-col items-center space-y-4 p-4\">\n      {renderGameScreen()}\n    </div>\n  );\n};\n\nexport default TicTacToe;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}