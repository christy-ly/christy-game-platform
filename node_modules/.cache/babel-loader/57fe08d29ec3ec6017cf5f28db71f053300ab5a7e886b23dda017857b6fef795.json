{"ast":null,"code":"var _jsxFileName = \"/Users/christylee/Desktop/christy-ly/christy-game-platform/src/games/TicTacToe.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TicTacToe = () => {\n  _s();\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [isXNext, setIsXNext] = useState(true);\n  const checkWinner = squares => {\n    const winningCombos = [[0, 1, 2], [3, 4, 5], [6, 7, 8],\n    // Rows\n    [0, 3, 6], [1, 4, 7], [2, 5, 8],\n    // Columns\n    [0, 4, 8], [2, 4, 6] // Diagonals\n    ];\n    for (let [a, b, c] of winningCombos) {\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  };\n  const handleClick = index => {\n    if (board[index] || checkWinner(board)) return;\n    const newBoard = board.slice();\n    newBoard[index] = isXNext ? \"X\" : \"O\";\n    setBoard(newBoard);\n    setIsXNext(!isXNext);\n  };\n  const resetGame = () => {\n    setBoard(Array(9).fill(null));\n    setIsXNext(true);\n  };\n  const winner = checkWinner(board);\n  const status = winner ? `Winner: ${winner}` : `Next Player: ${isXNext ? \"X\" : \"O\"}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center mt-10\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold\",\n      children: \"Tic-Tac-Toe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-lg mb-4\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-3 gap-2 w-48 mx-auto\",\n      children: board.map((cell, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"w-16 h-16 text-2xl font-bold border bg-gray-100 hover:bg-gray-300\",\n        onClick: () => handleClick(index),\n        children: cell\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetGame,\n      className: \"mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700\",\n      children: \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(TicTacToe, \"YEYSqvL6fOShla2jZSP//3y9U3U=\");\n_c = TicTacToe;\nexport default TicTacToe;\nvar _c;\n$RefreshReg$(_c, \"TicTacToe\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","TicTacToe","_s","board","setBoard","Array","fill","isXNext","setIsXNext","checkWinner","squares","winningCombos","a","b","c","handleClick","index","newBoard","slice","resetGame","winner","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","cell","onClick","_c","$RefreshReg$"],"sources":["/Users/christylee/Desktop/christy-ly/christy-game-platform/src/games/TicTacToe.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst TicTacToe = () => {\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [isXNext, setIsXNext] = useState(true);\n\n  const checkWinner = (squares) => {\n    const winningCombos = [\n      [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows\n      [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns\n      [0, 4, 8], [2, 4, 6],           // Diagonals\n    ];\n    for (let [a, b, c] of winningCombos) {\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  };\n\n  const handleClick = (index) => {\n    if (board[index] || checkWinner(board)) return;\n\n    const newBoard = board.slice();\n    newBoard[index] = isXNext ? \"X\" : \"O\";\n    setBoard(newBoard);\n    setIsXNext(!isXNext);\n  };\n\n  const resetGame = () => {\n    setBoard(Array(9).fill(null));\n    setIsXNext(true);\n  };\n\n  const winner = checkWinner(board);\n  const status = winner ? `Winner: ${winner}` : `Next Player: ${isXNext ? \"X\" : \"O\"}`;\n\n  return (\n    <div className=\"text-center mt-10\">\n      <h2 className=\"text-2xl font-bold\">Tic-Tac-Toe</h2>\n      <p className=\"text-lg mb-4\">{status}</p>\n      <div className=\"grid grid-cols-3 gap-2 w-48 mx-auto\">\n        {board.map((cell, index) => (\n          <button\n            key={index}\n            className=\"w-16 h-16 text-2xl font-bold border bg-gray-100 hover:bg-gray-300\"\n            onClick={() => handleClick(index)}\n          >\n            {cell}\n          </button>\n        ))}\n      </div>\n      <button\n        onClick={resetGame}\n        className=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700\"\n      >\n        Restart\n      </button>\n    </div>\n  );\n};\n\nexport default TicTacToe;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}