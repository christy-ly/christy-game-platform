{"ast":null,"code":"var _jsxFileName = \"/Users/christylee/Desktop/christy-ly/christy-game-platform/src/games/TicTacToe.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TicTacToe = () => {\n  _s();\n  const [gridSize, setGridSize] = useState(null); // Grid size starts as null\n  const [board, setBoard] = useState([]);\n  const [isXNext, setIsXNext] = useState(true);\n  const [winner, setWinner] = useState(null);\n  const [winningSquares, setWinningSquares] = useState([]);\n  const [inputSize, setInputSize] = useState(''); // Track input value for grid size\n\n  // Dynamically generate the winning lines for a grid of size 'gridSize'\n  const getWinningLines = size => {\n    const lines = [];\n\n    // Rows\n    for (let row = 0; row < size; row++) {\n      const rowLine = [];\n      for (let col = 0; col < size; col++) {\n        rowLine.push(row * size + col);\n      }\n      lines.push(rowLine);\n    }\n\n    // Columns\n    for (let col = 0; col < size; col++) {\n      const colLine = [];\n      for (let row = 0; row < size; row++) {\n        colLine.push(row * size + col);\n      }\n      lines.push(colLine);\n    }\n\n    // Diagonals\n    const diagonal1 = [];\n    const diagonal2 = [];\n    for (let i = 0; i < size; i++) {\n      diagonal1.push(i * size + i);\n      diagonal2.push((i + 1) * size - (i + 1));\n    }\n    lines.push(diagonal1);\n    lines.push(diagonal2);\n    return lines;\n  };\n\n  // Check for winner\n  const checkWinner = board => {\n    const lines = getWinningLines(gridSize);\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n        setWinningSquares([a, b, c]);\n        return board[a];\n      }\n    }\n    return null;\n  };\n  const handleClick = index => {\n    if (board[index] || winner) return;\n    const newBoard = board.slice();\n    newBoard[index] = isXNext ? 'X' : 'O';\n    setBoard(newBoard);\n    setIsXNext(!isXNext);\n    const gameWinner = checkWinner(newBoard);\n    if (gameWinner) {\n      setWinner(gameWinner);\n    }\n  };\n  const renderSquare = index => {\n    const isWinningSquare = winningSquares.includes(index);\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `w-20 h-20 text-4xl flex items-center justify-center border-2 border-black cursor-pointer\n          ${isWinningSquare ? 'text-red-600 font-bold animate-pulse' : ''}`,\n      onClick: () => handleClick(index),\n      children: board[index]\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  };\n  const resetGame = () => {\n    setBoard(Array(gridSize * gridSize).fill(null));\n    setIsXNext(true);\n    setWinner(null);\n    setWinningSquares([]);\n  };\n  const handleGridSizeChange = event => {\n    setInputSize(event.target.value);\n  };\n  const handleSubmitGridSize = event => {\n    event.preventDefault(); // Prevent form submission from reloading the page\n    const newSize = parseInt(inputSize, 10);\n    if (newSize >= 3 && newSize <= 10) {\n      // Grid size should be between 3 and 10\n      setGridSize(newSize);\n      setBoard(Array(newSize * newSize).fill(null)); // Reset the board\n      setWinner(null);\n      setWinningSquares([]);\n      setIsXNext(true);\n    } else {\n      alert('Please enter a valid grid size between 3 and 10');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center p-6\",\n    children: gridSize === null ?\n    /*#__PURE__*/\n    // Show grid size input if gridSize is not set\n    _jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"gridSize\",\n        className: \"mr-2 text-lg\",\n        children: \"Grid Size (3-10):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"gridSize\",\n        type: \"number\",\n        min: \"3\",\n        max: \"10\",\n        value: inputSize,\n        onChange: handleGridSizeChange,\n        className: \"w-20 p-2 border-2 border-black rounded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitGridSize,\n        className: \"ml-4 px-4 py-2 bg-blue-500 text-white font-semibold rounded hover:bg-blue-400\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // Show game board once grid size is set\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `grid grid-cols-${gridSize} gap-2`,\n        style: {\n          gridTemplateColumns: `repeat(${gridSize}, minmax(0, 1fr))`\n        },\n        children: board.map((_, index) => renderSquare(index))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 text-2xl\",\n        children: winner ? `${winner} wins!` : `Next player: ${isXNext ? 'X' : 'O'}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mt-4 px-6 py-2 bg-green-500 text-white font-semibold rounded hover:bg-green-400\",\n        onClick: resetGame,\n        children: \"Reset Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(TicTacToe, \"6yIRYHvBLeV0g4UbsvLq/fLE1gM=\");\n_c = TicTacToe;\nexport default TicTacToe;\nvar _c;\n$RefreshReg$(_c, \"TicTacToe\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","TicTacToe","_s","gridSize","setGridSize","board","setBoard","isXNext","setIsXNext","winner","setWinner","winningSquares","setWinningSquares","inputSize","setInputSize","getWinningLines","size","lines","row","rowLine","col","push","colLine","diagonal1","diagonal2","i","checkWinner","length","a","b","c","handleClick","index","newBoard","slice","gameWinner","renderSquare","isWinningSquare","includes","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","resetGame","Array","fill","handleGridSizeChange","event","target","value","handleSubmitGridSize","preventDefault","newSize","parseInt","alert","htmlFor","id","type","min","max","onChange","style","gridTemplateColumns","map","_","_c","$RefreshReg$"],"sources":["/Users/christylee/Desktop/christy-ly/christy-game-platform/src/games/TicTacToe.js"],"sourcesContent":["import { useState } from 'react';\n\nconst TicTacToe = () => {\n  const [gridSize, setGridSize] = useState(null); // Grid size starts as null\n  const [board, setBoard] = useState([]);\n  const [isXNext, setIsXNext] = useState(true);\n  const [winner, setWinner] = useState(null);\n  const [winningSquares, setWinningSquares] = useState([]);\n  const [inputSize, setInputSize] = useState(''); // Track input value for grid size\n\n  // Dynamically generate the winning lines for a grid of size 'gridSize'\n  const getWinningLines = (size) => {\n    const lines = [];\n\n    // Rows\n    for (let row = 0; row < size; row++) {\n      const rowLine = [];\n      for (let col = 0; col < size; col++) {\n        rowLine.push(row * size + col);\n      }\n      lines.push(rowLine);\n    }\n\n    // Columns\n    for (let col = 0; col < size; col++) {\n      const colLine = [];\n      for (let row = 0; row < size; row++) {\n        colLine.push(row * size + col);\n      }\n      lines.push(colLine);\n    }\n\n    // Diagonals\n    const diagonal1 = [];\n    const diagonal2 = [];\n    for (let i = 0; i < size; i++) {\n      diagonal1.push(i * size + i);\n      diagonal2.push((i + 1) * size - (i + 1));\n    }\n    lines.push(diagonal1);\n    lines.push(diagonal2);\n\n    return lines;\n  };\n\n  // Check for winner\n  const checkWinner = (board) => {\n    const lines = getWinningLines(gridSize);\n\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n        setWinningSquares([a, b, c]);\n        return board[a];\n      }\n    }\n    return null;\n  };\n\n  const handleClick = (index) => {\n    if (board[index] || winner) return;\n\n    const newBoard = board.slice();\n    newBoard[index] = isXNext ? 'X' : 'O';\n    setBoard(newBoard);\n    setIsXNext(!isXNext);\n\n    const gameWinner = checkWinner(newBoard);\n    if (gameWinner) {\n      setWinner(gameWinner);\n    }\n  };\n\n  const renderSquare = (index) => {\n    const isWinningSquare = winningSquares.includes(index);\n    return (\n      <button\n        key={index}\n        className={`w-20 h-20 text-4xl flex items-center justify-center border-2 border-black cursor-pointer\n          ${isWinningSquare ? 'text-red-600 font-bold animate-pulse' : ''}`}\n        onClick={() => handleClick(index)}\n      >\n        {board[index]}\n      </button>\n    );\n  };\n\n  const resetGame = () => {\n    setBoard(Array(gridSize * gridSize).fill(null));\n    setIsXNext(true);\n    setWinner(null);\n    setWinningSquares([]);\n  };\n\n  const handleGridSizeChange = (event) => {\n    setInputSize(event.target.value);\n  };\n\n  const handleSubmitGridSize = (event) => {\n    event.preventDefault(); // Prevent form submission from reloading the page\n    const newSize = parseInt(inputSize, 10);\n\n    if (newSize >= 3 && newSize <= 10) { // Grid size should be between 3 and 10\n      setGridSize(newSize);\n      setBoard(Array(newSize * newSize).fill(null)); // Reset the board\n      setWinner(null);\n      setWinningSquares([]);\n      setIsXNext(true);\n    } else {\n      alert('Please enter a valid grid size between 3 and 10');\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center p-6\">\n      {gridSize === null ? (\n        // Show grid size input if gridSize is not set\n        <div className=\"mb-4\">\n          <label htmlFor=\"gridSize\" className=\"mr-2 text-lg\">Grid Size (3-10):</label>\n          <input\n            id=\"gridSize\"\n            type=\"number\"\n            min=\"3\"\n            max=\"10\"\n            value={inputSize}\n            onChange={handleGridSizeChange}\n            className=\"w-20 p-2 border-2 border-black rounded\"\n          />\n          <button\n            onClick={handleSubmitGridSize}\n            className=\"ml-4 px-4 py-2 bg-blue-500 text-white font-semibold rounded hover:bg-blue-400\"\n          >\n            Submit\n          </button>\n        </div>\n      ) : (\n        // Show game board once grid size is set\n        <div>\n          <div\n            className={`grid grid-cols-${gridSize} gap-2`}\n            style={{ gridTemplateColumns: `repeat(${gridSize}, minmax(0, 1fr))` }}\n          >\n            {board.map((_, index) => renderSquare(index))}\n          </div>\n          <div className=\"mt-4 text-2xl\">\n            {winner ? `${winner} wins!` : `Next player: ${isXNext ? 'X' : 'O'}`}\n          </div>\n          <button\n            className=\"mt-4 px-6 py-2 bg-green-500 text-white font-semibold rounded hover:bg-green-400\"\n            onClick={resetGame}\n          >\n            Reset Game\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TicTacToe;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}